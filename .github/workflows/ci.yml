name: CI

on:
  push:
    branches:
      - 'staging'
      - 'trying'
      - 'master'
      - 'dev'
  pull_request:

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Install NodeJS 14.x
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          # The registry cache is useful as long as we need the same dependencies as another job, regardless of the Rust version and operating system.
          key: cargo-registry-${{ hashFiles('Cargo.lock') }}-v2

      - name: Cache dprint plugins
        uses: actions/cache@v2
        with:
          path: ~/.cache/dprint/cache/plugins
          key: dprint-plugins-${{ hashFiles('.dprintrc.json') }}

      - name: Cache cargo binaries
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin
          # The cargo binary cache is useful as long as we use the same Rust version but regardless of our dependencies.
          key: ubuntu-latest-cargo-binaries-${{ steps.toolchain.outputs.rustc_hash }}-v3

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          # The target directory is only useful with the same Rust version, dependencies and operating system.
          key: ubuntu-latest-target-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('Cargo.lock') }}-clippy-v2

      - name: Install dprint
        run: |
          curl -fsSL https://dprint.dev/install.sh | sh
          echo "/home/runner/.dprint/bin" >> $GITHUB_PATH

      - name: Check formatting
        run: dprint check

      - name: Run linter
        run: make lint

  build:
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf, x86_64-apple-darwin, x86_64-pc-windows-gnu]
        include:

          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            test_features: testcontainers

          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            # This target is only for cross-compiling, skip all tests.
            skip_unit_tests: true
            skip_e2e_tests: true

          - target: x86_64-apple-darwin
            os: macos-latest
            skip_e2e_tests: true

          - target: x86_64-pc-windows-gnu
            os: windows-latest
            skip_e2e_tests: true # Our e2e test framework doesn't work on windows.
            file_ext: .exe

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Install compiler for armhf arch
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          # The registry cache is useful as long as we need the same dependencies as another job, regardless of the Rust version and operating system.
          key: cargo-registry-${{ hashFiles('Cargo.lock') }}-v3

      - name: Cache cargo binaries
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin
          # The cargo binary cache is useful as long as we use the same Rust version and operating system, but regardless of our dependencies.
          key: ${{ matrix.os }}-cargo-binaries-${{ steps.toolchain.outputs.rustc_hash }}-v2

      - name: Cache target directory
        uses: actions/cache@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          path: target
          # The target directory is only useful with the same Rust version, dependencies and operating system.
          key: ${{ matrix.target }}-target-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('Cargo.lock') }}-build-v3

      - name: Build docs
        run: cargo doc

      - name: Run unit tests
        if: (!matrix.skip_unit_tests)
        shell: bash
        run: |
          (cd ./comit; cargo test --features "${{ matrix.test_features }}")
          (cd ./cnd; cargo test)
          (cd ./nectar; cargo test --features "${{ matrix.test_features }}")

      - name: Build binaries
        env:
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
        run: |
          cargo build -p cnd --target ${{ matrix.target }}
          cargo build -p nectar --target ${{ matrix.target }}

      - name: Upload cnd binary
        uses: actions/upload-artifact@v1
        with:
          name: cnd-${{ matrix.target }}
          path: target/${{ matrix.target }}/debug/cnd${{ matrix.file_ext }}

      - name: Upload nectar binary
        uses: actions/upload-artifact@v1
        with:
          name: nectar-${{ matrix.target }}
          path: target/${{ matrix.target }}/debug/nectar${{ matrix.file_ext }}

      - name: Install NodeJS 14.x
        if: (!matrix.skip_e2e_tests)
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Cache node_modules directory
        if: (!matrix.skip_e2e_tests)
        uses: actions/cache@v2
        with:
          path: tests/node_modules
          key: ${{ matrix.os }}-node-14-node-modules-directory-${{ hashFiles('tests/package.json') }}

      - name: Run e2e tests
        if: (!matrix.skip_e2e_tests)
        run: |
          export PATH=$HOME/.cargo/bin:$HOME/.local/bin:$PATH
          cd tests
          yarn install
          yarn test

      - name: Upload bitcoind log
        if: (!matrix.skip_e2e_tests) && failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.os }}-e2e-logs-bitcoind.log
          path: tests/log/bitcoind/regtest/debug.log

      - name: Upload parity log
        if: (!matrix.skip_e2e_tests) && failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.os }}-e2e-logs-parity.log
          path: tests/log/parity/parity.log

      - name: Upload lnd logs
        if: (!matrix.skip_e2e_tests) && failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.os }}-e2e-logs-lnd
          path: tests/log/lnd-*/logs/bitcoin/regtest/lnd.log

      - name: Upload e2e logs
        if: (!matrix.skip_e2e_tests) && failure()
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ matrix.os }}-e2e-test-logs
          path: tests/log/tests/
